name: Build and Release

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - master

permissions:
  contents: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
          - os: macos-latest
            goos: darwin
            goarch: amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: ${{ (matrix.os == 'ubuntu-latest' && matrix.goarch == 'amd64') || matrix.os == 'macos-latest' && '1' || '0' }}
        run: |
          go build -ldflags "-s -w -X main.version=${{ github.ref_name }}" -o sony-remote-${{ matrix.goos }}-${{ matrix.goarch }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: sony-remote-${{ matrix.goos }}-${{ matrix.goarch }}
          path: sony-remote-${{ matrix.goos }}-${{ matrix.goarch }}

  release:
    if: ${{ !cancelled() }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Get latest tag
        id: latest_tag
        run: |
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LATEST_TAG" ]; then
            echo "tag=${LATEST_TAG}-dev" >> $GITHUB_OUTPUT
            echo "name=${LATEST_TAG} Development Build" >> $GITHUB_OUTPUT
          else
            echo "tag=nightly" >> $GITHUB_OUTPUT
            echo "name=Nightly Build" >> $GITHUB_OUTPUT
          fi

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          files: '*/sony-remote-*'
          tag_name: ${{ github.ref_type == 'tag' && github.ref_name || steps.latest_tag.outputs.tag }}
          name: ${{ github.ref_type == 'tag' && github.ref_name || steps.latest_tag.outputs.name }}
          prerelease: ${{ github.ref_type != 'tag' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}